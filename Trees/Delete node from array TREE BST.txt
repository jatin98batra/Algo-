#include <iostream>
using namespace std;
class tree{
    public:
     int data;
     tree* left;
     tree* right;

     tree(int d){
         data = d;
         left = NULL;
         right = NULL;
     }
};

tree *buildTree(int *a, int start, int end){
    if(start>end){
        return NULL;
    }
    int mid = (start+end)/2;
    tree* root = new tree(a[mid]);
    
    root->left = buildTree(a,start,mid-1);
    root->right = buildTree(a,mid+1, end);
    return root;
}

tree* insertInBst(tree* root, int data){
    if(root==NULL){
        root = new tree(data);
        return root;
    }
    if(data<=root->data){
        root->left = insertInBst(root->left, data);
    }
    else{
        root->right = insertInBst(root->right, data);
    }
    return root;

}
tree* insert(int *a, int n){
     tree *root = new tree(a[0]);
    for(int i=1;i<n;i++){
        root = insertInBst(root,a[i]);
    }
    return root;
   
}
void print(tree* root){
    if(root == NULL)
        return;

    cout<<root->data<<" ";
    print(root->left);
    print(root->right);
}
tree *deleteNode(tree* root, int data){
    if(root == NULL){
        return NULL;
    }
    else if(data<root->data){
        root->left = deleteNode(root->left, data);
        return root;
    }
    else if(data == root -> data){
        // NODE FOUND
        if(root->left == NULL && root->right == NULL){
            delete root;
            return NULL;
        }
        //2. Node with 1 child
        if(root->left != NULL && root->right == NULL){
            tree* temp = root->left;
            delete root;
            return temp;
        }
        if(root->left == NULL && root->right != NULL){
            tree* temp = root->right;
            delete root;
            return temp;
        }
        //3. 2 childs
        tree* replace = root->right;
        while(replace->left!=NULL){
            replace = replace->left;
        }
        root->data = replace->data;
        root->right = deleteNode(root->right, replace->data);
        return root;
    }
    else{
        root->right = deleteNode(root->right, data);
        return root;
    }
}

int main() {
        int test;
        cin>>test;
        while(test--){
        int n1,n2;
        cin>>n1;
        int a[n1];
        for(int i =0; i<n1; i++){
            cin>>a[i];
        }
        cin>>n2;
        int b[n2];
        for(int i=0; i<n2; i++){
            cin>>b[i];
        }
            tree *root = insert(a,n1);
            for(int i=0; i<n2; i++){
               root = deleteNode(root, b[i]);
            }
            print(root);
            cout<<"\n";
        }
}
