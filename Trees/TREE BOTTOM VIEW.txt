#include <bits/stdc++.h>
using namespace std;
class tree{
public:
    int data;
    int horizontalDistance;
    tree* left;
    tree* right;
    tree(int d){
        data = d;
    }
};
tree* buildLevelOrder(long long int *a,long long int i, long long int n){
    if(a[i]==-1 || 2*i > n){
        return NULL;
    }
    tree* root = new tree(a[i]);
    if(2*i +1 < n){
        root->left = buildLevelOrder(a,2*i+1,n);
    }
    if(2*i+2<n){
        root->right = buildLevelOrder(a,2*i+2,n);
    }
    return root;
}
void printBottomView(tree*root){
    if(root==NULL){
        return;
    }
    int horizontalDistance = 0;
    map<int,int> m;
    queue<tree*> q;
    root -> horizontalDistance = horizontalDistance;
    q.push(root);
    while(!q.empty()){
        tree* temp = q.front();
        q.pop();
        horizontalDistance = temp->horizontalDistance;
        m[horizontalDistance] = temp->data;
        if(temp->left){
            temp->left->horizontalDistance = horizontalDistance - 1;
            q.push(temp->left);
        }
        if(temp->right){
            temp->right->horizontalDistance = horizontalDistance+1;
            q.push(temp->right);
        }
    }

    for(auto i = m.begin(); i!=m.end(); i++){
        cout<<i->second<<" ";
    }
}

void bfs(tree* root){
    if(root==NULL){
        return;
    }
    queue<tree *> q;
    q.push(root);
    q.push(NULL);
    while(!q.empty()){
        tree *temp = q.front();
        if(temp==NULL){
            cout<<endl;
            q.pop();
            if(!q.empty()){
                q.push(NULL);
            }
        }else{
        cout<<temp->data<<" ";
        q.pop();
        if(temp->left){
            q.push(temp->left);
        }
        if(temp->right){
            q.push(temp->right);
        }
        }
    }
}
int main() {
    long long int a[10000000];
    int x;
    long long int i=0;
    while(scanf("%d",&x)!=EOF){
        a[i] = x;
        i++;
    }
    tree *root = buildLevelOrder(a,0,i+1);
    bfs(root);
    printBottomView(root); 

}
