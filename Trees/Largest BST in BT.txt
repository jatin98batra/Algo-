#include <iostream>
#include<climits>
#include<queue>
using namespace std;
class tree{
    public:
    int data;
    tree* left;
    tree* right;
    tree(int d){
        data = d;
        left = NULL;
        right = NULL;
    }
};

tree * makeTree(int *pre, int *in, int start, int end){
    if(start>end){
        return NULL;
    }
    //rec case
 
    static int i = 0;
    tree *root = new tree(pre[i]);
    //linear search
    int j = 0;
    for(j = start; j<=end; j++){
        if(in[j] == pre[i]){
            break;
        }
    }
    i++;
    root->left = makeTree(pre,in,start,j-1);
    root->right = makeTree(pre,in, j+1, end);
    return root;
}
int count = 0;
bool isBST(tree* root, int minV = INT_MIN, int maxV = INT_MAX){
    if(root == NULL){
        return true;
    }
    if(root->data >= minV && root->data <= maxV && isBST(root->left,minV, root->data) && isBST(root->right, root->data, maxV)){
        count++;
        //cout<<count;
        return true;
    }
    return false;
}
int size(tree* root){
    if(root == NULL){
        return 0;
    }
    else{
        return (size(root->left) + 1 + size(root->right));
    }
}

int largestBst(tree* root){
    if(isBST(root)){
        return size(root);
    }
    else{
        return max(largestBst(root->left), largestBst(root->right));
    }
}
void print(tree* root){
    if(root==NULL){
        return;
    }
    cout<<root->data<<" ";
    print(root->left);
    print(root->right);
    return;
}

void bfs(tree * root){
    queue<tree*> q;
    q.push(root);
    q.push(NULL);
    while(!q.empty()){
        tree *f = q.front();
          if(f==NULL){
            cout<<endl;
            q.pop();
            if(!q.empty()){
                q.push(NULL);
            }
        }
        else{
        cout<<f->data<<" ";
        q.pop();
        
        if(f->left){
            q.push(f->left);
        }
        if(f->right){
            q.push(f->right);
          }
        }
    }
    return;
}

int main() {
   int n1,n2;
     cin>>n1;
   int pre[n1];

   for(int i = 0; i<n1;i++){
       cin>>pre[i];
   }

   int in[n1];
   for(int i = 0; i<n1;i++){
       cin>>in[i];
   }

   tree *root = makeTree(pre,in, 0, n1 - 1); 
  // bfs(root);
   //cout<<"\n";
   //isBST(root);
   cout<<largestBst(root);
}
