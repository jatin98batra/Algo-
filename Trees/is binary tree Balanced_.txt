#include <iostream>
#include<climits>
#include<queue>
using namespace std;
int x = 0;
class tree{
public:
    int data;
    tree* left;
    tree* right;
    tree(int d){
        data = d;
        left = NULL;
        right = NULL;
    }
};


tree* insert(tree* &root){
    if(x==0){
        int k;
        cin>>k;
        x++;
        root = new tree(k);
        root->left = insert(root->left);
        root->right = insert(root->right);
        return root;
    }
    string s;
    cin>>s;
    if(s=="true"){
        int d;
        cin>>d;
        tree *newNode = new tree(d);
        newNode->left = insert(newNode->left);
        newNode->right = insert(newNode->right);
        return newNode;
    }
    else{
        return root;
    }
    return root;
}
// bool isBST(tree* root, int minV = INT_MIN, int maxV = INT_MAX){
//     if(root == NULL){
//         return true;
//     }
//     if(root->data >= minV && root->data <= maxV && isBST(root->left,minV, root->data) && isBST(root->right, root->data, maxV)){
//         return true;
//     }
//     return false;
// }
// void print(tree* root){
//     if(root==NULL){
//         return;
//     }
//     cout<<root->data<<" ";
//     print(root->left);
//     print(root->right);
//     return;
// }
int height(tree* root){
    if(root==NULL){
        return 0;
    }
    return 1 + max(height(root->left),  
                height(root->right)); 
}
bool isBT(tree* root){
    if(root == NULL){
        return true;
    }
    int left,right;
    left = height(root->left);
    right = height(root->right);
    if(abs(left - right) <= 1 && isBT(root->left)&& isBT(root->right) ){
        return true;
    }
    return false;
}
void bfs(tree * root){
    queue<tree*> q;
    q.push(root);
    q.push(NULL);
    while(!q.empty()){
        tree *f = q.front();
          if(f==NULL){
            cout<<endl;
            q.pop();
            if(!q.empty()){
                q.push(NULL);
            }
        }
        else{
        cout<<f->data<<" ";
        q.pop();
        
        if(f->left){
            q.push(f->left);
        }
        if(f->right){
            q.push(f->right);
          }
        }
    }
    return;
}

int main() {

    tree *root1 = NULL;
    insert(root1);
    //print(root1);
    //bfs(root1);
    isBT(root1) ? cout<<"true":cout<<"false";
    
}