#include <iostream>
using namespace std;
class node{
 public:
    int data;
    node *next;
    node(int d){
        data = d;
        next = NULL;
    }
};
void print(node* head){
    node*temp = head;
    while(temp!=NULL){
        cout<<temp->data<<"->";
        temp = temp ->next;
    }
}
int length(node* head){
    int count=0;
    while(head!=NULL){
        head = head->next;
        count++;
    }
    return count;
}
void insertAtHead(node*& head, int data);
void insertAtEnd(node*&head, int data);
//MIDDLE!!!!!!!!!!!!!!!1
void insertAtMiddle(node*&head, int data, int p){
    if(head == NULL || p == 0){
        insertAtHead(head, data);
    }
    else if(p>length(head)){
        insertAtEnd(head, data);
    }
    else{
        int jmp = 1;
        node*temp = head;
        while(jmp<=p-1){
            temp = temp->next;
            jmp += 1;
        }
        node *n = new node(data);
        n->next = temp->next;
        temp->next = n;
    }
}

//TAIL!!!!!!!!!!!!!!!!
void insertAtEnd(node*&head, int data){
    if(head==NULL){
        head = new node(data);
        return;
    }
    node *tail = head;
    while(tail->next != NULL){
        tail = tail -> next;
    }
    tail->next = new node(data);
    return;
}
//HEAD!!!!!!!!!!!!!!!!
void insertAtHead(node*& head, int data){
    node *n = new node(data);
    n->next = head;
    head = n;
}
void buildList(node*&head){
    int data;
    cin>>data;
    while(data!=-1){
        insertAtEnd(head, data);
        cin>>data;
    }
}

//Reversing a Linked List
void reverseIterative(node* &head){
    node *current = head;
    node *previous = NULL;
    node *nextNode;

    while(current!= NULL){
        nextNode = current->next;
        current->next = previous;
        previous = current;
        current = nextNode;
    }
    head = previous;
}
//Recursively Reverse
node* reverse(node*head){
    if(head->next == NULL|| head == NULL){
        return head;
    }
    node* smallHead = reverse(head->next);
    // reverse(smallHead);
    node *c  = head;
    c->next->next = c;
    c->next = NULL;
    return smallHead;

}
//Kth node from Last of Linked list
void kthNode(node*head, int k){
    node *slow = head;
    node *fast = head;
    for(int i = 0; i<k; i++){
        fast = fast->next;
    }
    while(fast->next != NULL){
        slow = slow->next;
        fast = fast->next;
    }
    cout<<slow->data;

}
//DELETION in LINKED LIST
// Delete at Head
void deleteAtHead(node*& head){
    if(head==NULL){
        return;
    }
    node *temp = head;
    head = head->next;
    delete temp;
    return;
}
//Delete At Tail
void deleteAtTail(node* &head){
    if(head==NULL){
        return;
    }
    node* temp = head;
    node *prev;
    while(temp->next!=NULL){
        prev = temp;
        temp = temp->next;
    }
    prev->next = NULL;
    delete temp;
}
//Delete in Middle
void deleteInMiddle(node*&head, int p){
    
    if(head==NULL||p==0||p>length(head)){
        return;
    }
    else if(p==1){
        deleteAtHead(head);
    }
   else if(p==length(head)){
       deleteAtTail(head);
    }
    else{
        int j = 1;
        node *temp = head;
        while(j<p-1){
            
            temp = temp->next;
            j++;
        }
        node *n;
        n = temp->next;
        temp->next = n->next;
        delete n;
        
    }

}
//main
int main() {
   node *head = NULL;
   buildList(head);
   print(head);
   
//    reverseIterative(head);
    //head = reverse(head);
 //  kthNode(head, 3);
    deleteInMiddle(head, 3);
    cout<<endl;
   print(head);
}
