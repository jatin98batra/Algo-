#include <iostream>
using namespace std;

class node{
 public:
    int data;
    node *next;
    node(int d){
        data = d;
        next = NULL;
    }
};
void print(node* head){
    node*temp = head;
    while(temp!=NULL){
        cout<<temp->data<<"->";
        temp = temp ->next;
    }
}
void insertAtTail(node*&head, int data){
    if(head == NULL){
        head = new node(data);
        return;
    }
    node *tail = head;
    while(tail->next!=NULL){
        tail = tail->next;
    }
    tail->next = new node(data);
    return;

}
void buildList(node*&head, int size){
    int n;
    for(int i=0;i<size; i++){
        cin>>n;
        insertAtTail(head, n);
    }

}

void reverseIterative(node* &head){
    node *current = head;
    node *previous = NULL;
    node *nextNode;

    while(current!= NULL){
        nextNode = current->next;
        current->next = previous;
        previous = current;
        current = nextNode;
    }
    head = previous;
}
node* reverse(node*head){
    if(head->next == NULL|| head == NULL){
        return head;
    }
    node* smallHead = reverse(head->next);
    // reverse(smallHead);
    node *c  = head;
    c->next->next = c;
    c->next = NULL;
    return smallHead;

}
node* reversek(node* head, int k){
   if(head->next == NULL){
        return head;
    }
     node *current = head;
            node *previous = NULL;
            node *nextNode;
            int count = 0;
    while(current!=NULL&&count<k){

        nextNode = current->next;
        current->next = previous;
        previous = current;
        current = nextNode;
        count++;
    }
    if(nextNode!=NULL){
        head->next = reversek(nextNode,k);
    }
    return previous;
}
int main() {
  node* head = NULL;
    int size,key;
    cin>>size>>key;
    buildList(head, size);
    //print(head);
    head = reversek(head, key);
    print(head);
}
